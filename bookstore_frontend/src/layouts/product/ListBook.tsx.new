import React, { useEffect, useState } from 'react';
import BookModel from '../../models/BookModel';
import { BookProps } from './components/BookProps';
import { Pagination } from '../utils/Pagination';

interface ApiBook {
  maSach: number;
  tenSach: string;
  giaBan: number;
  giaNiemYet: number;
  moTa: string;
  soLuong: number;
  tenTacGia: string;
  trungBinhXepHang: number;
  hinhAnhs: any[];
}

interface CategoryResponse {
  maTheLoai: number;
  tenTheLoai: string;
  danhSachQuyenSach: ApiBook[];
}

interface BooksResponse {
  data: ApiBook[];
  totalPages: number;
  totalItem: number;
}

interface ListBookProps {
  nameSearch: string;
  maTheLoai: number;
}

export const ListBook: React.FC<ListBookProps> = ({ nameSearch, maTheLoai }) => {
  const [books, setBooks] = useState<BookModel[]>([]);
  const [loadingData, setLoadingData] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 8;

  useEffect(() => {
    const fetchBooks = async () => {
      setLoadingData(true);
      try {
        let endpoints;
        if (nameSearch) {
          // Tìm kiếm theo tên
          endpoints = `http://localhost:8080/api/v1/sachs/search?tenSach=${encodeURIComponent(nameSearch)}&current=${currentPage}&pageSize=${pageSize}`;
        } else if (maTheLoai > 0) {
          // Lấy theo thể loại
          endpoints = `http://localhost:8080/api/v1/theloai/find/${maTheLoai}`;
        } else {
          // Lấy tất cả sách
          endpoints = `http://localhost:8080/api/v1/sachs?sort=maSach,desc&current=${currentPage}&pageSize=${pageSize}`;
        }

        console.log('Calling API:', endpoints);
        const response = await fetch(endpoints);
        if (!response.ok) {
          throw new Error('Không thể kết nối tới máy chủ');
        }
        const data = await response.json();
        console.log('API Response:', data);

        if (maTheLoai > 0 && !nameSearch) {
          // Xử lý dữ liệu từ API thể loại
          const categoryData = data as CategoryResponse;
          const booksList = categoryData.danhSachQuyenSach || [];
          console.log('Danh sách sách từ thể loại:', booksList);
          
          // Chuyển đổi dữ liệu sang đúng format BookModel
          const formattedBooks = booksList.map((book: ApiBook) => new BookModel(
            book.maSach,
            book.tenSach,
            book.giaBan,
            book.giaNiemYet,
            book.moTa,
            book.soLuong,
            book.tenTacGia,
            book.trungBinhXepHang,
            book.hinhAnhs
          ));
          
          // Phân trang
          const start = (currentPage - 1) * pageSize;
          const end = start + pageSize;
          const booksToShow = formattedBooks.slice(start, end);
          console.log('Sách hiển thị trang hiện tại:', booksToShow);
          
          setBooks(booksToShow);
          setTotalPages(Math.ceil(booksList.length / pageSize));
        } else {
          // Xử lý dữ liệu từ API sách
          const booksData = data as BooksResponse;
          const booksList = booksData.data || [];
          console.log('Danh sách sách từ API chung:', booksList);
          
          // Chuyển đổi dữ liệu sang đúng format BookModel
          const formattedBooks = booksList.map((book: ApiBook) => new BookModel(
            book.maSach,
            book.tenSach,
            book.giaBan,
            book.giaNiemYet,
            book.moTa,
            book.soLuong,
            book.tenTacGia,
            book.trungBinhXepHang,
            book.hinhAnhs
          ));
          
          setBooks(formattedBooks);
          setTotalPages(booksData.totalPages || Math.ceil((booksData.totalItem || 0) / pageSize));
        }
      } catch (error: any) {
        console.error('Error fetching books:', error);
        setError(error.message || 'Lỗi khi tải dữ liệu sách');
      } finally {
        setLoadingData(false);
      }
    };

    fetchBooks();
  }, [currentPage, nameSearch, maTheLoai, pageSize]);

  const handlePaginate = (page: number) => {
    setCurrentPage(page);
  };

  if (loadingData) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '200px' }}>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Đang tải...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger" role="alert">
        {error}
      </div>
    );
  }

  if (books.length === 0) {
    return (
      <div className="container">
        <div className="alert alert-info mt-4" role="alert">
          Không tìm thấy sách nào
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="row mt-4 mb-4">
        {books.map((book: BookModel) => (
          <div className="col-3 mb-4" key={book.maSach}>
            <BookProps book={book} />
          </div>
        ))}
      </div>
      {totalPages > 1 && (
        <div className="d-flex justify-content-center">
          <Pagination currentPage={currentPage} totalPages={totalPages} paginate={handlePaginate} />
        </div>
      )}
    </div>
  );
};
